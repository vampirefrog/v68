	- INTERRUPT VECTOR MANUAL -

==============================================================================

・Exception vectors (Maker Reserv:$00〜3f)

address	vector
$000000	  $00	SSP after reset
$000004	  $01	PC      〃
$000008	  $02	Bus error / access fault
$00000c	  $03	Address error
$000010	  $04	Improper order
$000014	  $05	Division by 0
$000018	  $06	CHK command
$00001c	  $07	TRAPV、TRAPcc、cpTRAPcc command
$000020	  $08	Privilege violation
$000024	  $09	Trace exception handling
$000028	  $0a	Unimplemented command line 1010 emulator (SX call)
$00002c	  $0b	〃                    line 1111 emulator (DOS call, floating point operation)
$000030	  $0c	Unused
$000034	  $0d	FPU protocol violation exception handling
$000038	  $0e	〃  Format error exception handling
$00003c	  $0f	Uninitialized interrupt
$000040	  $10	Unused
$000044	  $11	〃
$000048	  $12	〃
$00004c	  $13	〃
$000050	  $14	〃
$000054	  $15	〃
$000058	  $16	〃
$00005c	  $17	〃
$000060	  $18	Spurious interrupt
$000064	  $19	Level 1 interrupt (during auto vector)
$000068	  $1a	〃	2 〃
$00006c	  $1b	〃	3 〃
$000070	  $1c	〃	4 〃
$000074	  $1d	〃	5 〃
$000078	  $1e	〃	6 〃
$00007c	  $1f	〃	7 〃(NMI)
$000080	  $20	trap #0
$000084	  $21	〃   #1
$000088	  $22	〃   #2
$00008c	  $23	〃   #3
$000090	  $24	〃   #4
$000094	  $25	〃   #5
$000098	  $26	〃   #6
$00009c	  $27	〃   #7
$0000a0	  $28	〃   #8  (System reserved)
$0000a4	  $29	〃   #9  (For OS debugger)
$0000a8	  $2a	〃   #10 (Reset / Power off processing)
$0000ac	  $2b	〃   #11 (BREAK key processing)
$0000b0	  $2c	〃   #12 (COPY key processing)
$0000b4	  $2d	〃   #13 (CTRL + C processing)
$0000b8	  $2e	〃   #14 (Error handling)
$0000bc	  $2f	〃   #15 (IOCS call)
$0000c0	  $30	FPU BSUN	(Branch/Set on Unordered) Exception handling
$0000c4	  $31	〃  INEX1,INEX2	(Inexact Decimal Input,Inexact Operation)
$0000c8	  $32	〃  DZ		(Divide by Zero)
$0000cc	  $33	〃  UNFL	(Underflow)
$0000d0	  $34	〃  OPERR	(Operand Error)
$0000d4	  $35	〃  OVFL	(Overflow)
$0000d8	  $36	〃  SNAN	(Signaling Not A Number)
$0000dc	  $37	〃  UNSUPP	(Unimplemented Data Type)
$0000e0	  $38	MMU configuration error
$0000e4	  $39	〃  (68851)
$0000e8	  $3a	〃  (68851)
$0000ec	  $3b	Unused
$0000f0	  $3c	Unimplemented effective address exception handling
$0000f4	  $3d	Unimplemented integer instruction exception handling
$0000f8	  $3e	Unused
$0000fc	  $3f	〃

Remarks The vector $0c (address $30) is referenced at X68030 when determining whether it is a restart by reset.

・Exception vector (user interrupt: $40 to $ff)

address	vector
$000100	  $40	MFP RTC alarm / 1 Hz
$000104	  $41	MFP external power OFF
$000108	  $42	MFP front switch OFF
$00010c	  $43	MFP FM sound source
$000110	  $44	MFP Timer-D (used for BG processing)
$000114	  $45	MFP Timer-C (mouse / cursor / FDD control etc.)
$000118	  $46	MFP V-DISP
$00011c	  $47	MFP unused
$000120	  $48	MFP Timer-B
$000124	  $49	MFP key serial output error
$000128	  $4a	MFP key serial output sky
$00012c	  $4b	MFP key serial input error
$000130	  $4c	MFP key With serial input
$000134	  $4d	MFP Timer-A
$000138	  $4e	MFP CRTC · IRQ
$00013c	  $4f	MFP H-SYNC
$000140	  $50	SCC(B)	Transmit buffer empty
$000144	  $51	SCC(B)	〃 ※
$000148	  $52	SCC(B)	External status change
$00014c	  $53	SCC(B)	〃 ※
$000150	  $54	SCC(B)	Received Character Enabled (Mouse 1 byte Input)
$000154	  $55	SCC(B)	〃 ※
$000158	  $56	SCC(B)	Special Rx condition
$00015c	  $57	SCC(B)	〃 ※
$000160	  $58	SCC(A)	Transmit buffer empty
$000164	  $59	SCC(A)	〃 ※
$000168	  $5a	SCC(A)	External status change
$00016c	  $5b	SCC(A)	〃 ※
$000170	  $5c	SCC(A)	Received character valid (RS-232C 1 byte input)
$000174	  $5d	SCC(A)	〃 ※
$000178	  $5e	SCC(A)	Special Rx condition
$00017c	  $5f	SCC(A)	〃 ※
$000180	  $60	I/O	FDC status interrupt
$000184	  $61	I/O	FDD insertion / ejection interrupt
$000188	  $62	I/O	HDC status interrupt
$00018c	  $63	I/O	Printer ready interrupt
$000190	  $64	DMAC	#0 End  (FDD)
$000194	  $65	DMAC	#0 error(〃 )
$000198	  $66	DMAC	#1 End  (SASI/SCSI)
$00019c	  $67	DMAC	#1 error(〃	   )
$0001a0	  $68	DMAC	#2 End  (IOCS _DMAMOVE,_DMAMOV_A,_DMAMOV_L)
$0001a4	  $69	DMAC	#2 error(〃				   )
$0001a8	  $6a	DMAC	#3 End (ADPCM)
$0001ac	  $6b	DMAC	#3 Error (ADPCM)
$0001b0	  $6c	SPC SCSI interrupt (internal SCSI)
$0001b4	  $6d	Unused
…	  …	…
$0001fc	  $7f	Unused
$000200	  $80	MIDI	MIDI board (#0) MIDI real-time message detected
$000204	  $81	MIDI	〃 ※
$000208	  $82	MIDI	〃		 Click Counter / MIDI-clock detected
$00020c	  $83	MIDI	〃 ※
$000210	  $84	MIDI	〃		 Play-back Counter
$000214	  $85	MIDI	〃 ※
$000218	  $86	MIDI	〃		 Recording Counter
$00021c	  $87	MIDI	〃 ※
$000220	  $88	MIDI	〃		 Off-line detected / Break detected
$000224	  $89	MIDI	〃 ※
$000228	  $8a	MIDI	〃		 FIFO-Rx ready
$00022c	  $8b	MIDI	〃 ※
$000230	  $8c	MIDI	〃		 FIFO-Tx empty
$000234	  $8d	MIDI	〃 ※
$000238	  $8e	MIDI	〃		 General Timer
$00023c	  $8f	MIDI	〃 ※
$000240	  $90	Unused
…	  …	…
$00027c	  $9f	Unused
$000280	  $a0	MIDI	MIDI board (#1) MIDI real-time message detected
$000284	  $a1	MIDI	〃 ※
$000288	  $a2	MIDI	〃		 Click Counter / MIDI-clock detected
$00028c	  $a3	MIDI	〃 ※
$000290	  $a4	MIDI	〃		 Play-back Counter
$000294	  $a5	MIDI	〃 ※
$000298	  $a6	MIDI	〃		 Recording Counter
$00029c	  $a7	MIDI	〃 ※
$0002a0	  $a8	MIDI	〃		 Off-line detected / Break detected
$0002a4	  $a9	MIDI	〃 ※
$0002a8	  $aa	MIDI	〃		 FIFO-Rx ready
$0002ac	  $ab	MIDI	〃 ※
$0002b0	  $ac	MIDI	〃		 FIFO-Tx empty
$0002b4	  $ad	MIDI	〃 ※
$0002b8	  $ae	MIDI	〃		 General Timer
$0002bc	  $af	MIDI	〃 ※
$0002c0	  $b0	RS232C extended RS-232C (#0) channel B
$0002c4	  $b1	〃	〃
$0002c8	  $b2	〃	〃
$0002cc	  $b3	〃	〃
$0002d0	  $b4	〃	〃
$0002d4	  $b5	〃	〃
$0002d8	  $b6	〃	〃
$0002dc	  $b7	〃	〃
$0002e0	  $b8	RS232C extended RS-232C (#0) Channel A
$0002e4	  $b9	〃	〃
$0002e8	  $ba	〃	〃
$0002ec	  $bb	〃	〃
$0002f0	  $bc	〃	〃
$0002f4	  $bd	〃	〃
$0002f8	  $be	〃	〃
$0002fc	  $bf	〃	〃
$000300	  $c0	RS232C extended RS-232C (#1) channel B
$000304	  $c1	〃	〃
$000308	  $c2	〃	〃
$00030c	  $c3	〃	〃
$000310	  $c4	〃	〃
$000314	  $c5	〃	〃
$000318	  $c6	〃	〃
$00031c	  $c7	〃	〃
$000320	  $c8	RS232C extended RS-232C (#1) Channel A
$000324	  $c9	〃	〃
$000328	  $ca	〃	〃
$00032c	  $cb	〃	〃
$000330	  $cc	〃	〃
$000334	  $cd	〃	〃
$000338	  $ce	〃	〃
$00033c	  $cf	〃	〃
$000340	  $d0	Unused
…	  …	…
$0003bc	  $ef	Unused
$0003c0	  $f0	PSX PSX16550 / PSX16750 Receive interrupt
$0003c4	  $f1	Unused
…	  …	…
$0003d4	  $f5	未使用
$0003d8	  $f6	SPC SCSI interrupt(SCSI Board)
$0003dc	  $f7	TS-6BSI	Parallel port
$0003e0	  $f8	ETHER	Nereid (#1) Ethernet
$0003e4	  $f9	ETHER	Nereid (#0) Ethernet / Neptune-X / Neptune-Evolution
	  $f9	PARA	Parallel board (#0)
$0003e8	  $fa	PARA	Parallel board (#1)
	  $fa	USB	Nereid (#1) USB
$0003ec	  $fb	USB	Nereid (#0) USB
$0003f0	  $fc	U-I/O	Universal I / O (#0)
$0003f4	  $fd	〃	〃		 (#1)
$0003f8	  $fe	〃	〃		 (#2)
$0003fc	  $ff	〃	〃		 (#3)
		MU	MK-MU1O(Mercury-Unit V4 OPNA) OPNA timer interrupt

※SCC	　Two SCCs are set for each interrupt, but the same address is set. However, it is the even vector which actually generates an interrupt and uses it.
※MIDI	　For even MIDI board interrupts, only even vectors are used.
※ETHER	　Depending on the implementation of Neptune-X, you can set arbitrary vectors with DIP SW or jumper (Amaltea version, Evolution, etc.).

==============================================================================

・Interrupt vector setting port

　The following are all byte size ports.


・DMAC

device	address	r/w
DMAC(#0)
 NIV	$e84025	R/W	%PPPP_PPPP (Default = $0f)
 EIV	$e84027	R/W	%PPPP_PPPP (Default = $0f)
DMAC(#1)
 NIV	$e84065	R/W	%PPPP_PPPP (Default = $0f)
 EIV	$e84067	R/W	%PPPP_PPPP (Default = $0f)
DMAC(#2)
 NIV	$e840a5	R/W	%PPPP_PPPP (Default = $68)
 EIV	$e840a7	R/W	%PPPP_PPPP (Default = $69)
DMAC(#3)
 NIV	$e840e5	R/W	%PPPP_PPPP (Default = $6a)
 EIV	$e840e7	R/W	%PPPP_PPPP (Default = $6b)

	NIV = Normal interrupt vector
	EIV = Error interrupt vector

・MFP

device	address	r/w
MFP	$e88017	R/W	%PPPP_XXXX (Default = $40)
 VR			※ Lower 4 bits are changed by interrupt vector
			%0000: GPIP0		%1000: Timer B
			%0001: GPIP1		%1001: sending error
			%0010: GPIP2		%1010: Transmit buffer empty
			%0011: GPIP3		%1011: Reception error
			%0100: Timer D		%1100: Receive buffer full
			%0101: Timer C		%1101: Timer A
			%0110: GPIP2		%1110: GPIP6
			%0111: GPIP3		%1111: GPIP7

Note that bit 3 of VR (vector register) is set to in service register enable, and it is used to select auto EOI mode (% 0) or software EOI mode (% 1).
Human 68k uses it in auto EOI mode.

・SCC

device	address	r/w
SCC(B)	$e98001	R/W	%PPPP_XXXP (Default = $50)
 WR2/RR2
SCC(A)	$e98005	R/W	%PPPP_XXXP (Default = $50)
 WR2/RR2		※Bits 3 and 1 are changed by interrupt factor
			%000: Channel B transmit buffer empty
			%001:	〃	   External status change
			%010:	〃	   Received Character Effective
			%011:	〃	   Special Rx condition
			%100: Channel A transmit buffer empty
			%101:	〃	   External status change
			%110:	〃	   Received Character Effective
			%111:	〃	   Special Rx condition

　To set the vector number to SCC, first write the number 2 of WR 2 (write register 2) to the command port of $ e 98001 (channel B) and $ e 98005 (same A), and then write the vector number you want to set to the same port .

　RR 2 (read register 2) is read when 2 is written to the command port and then read from the same port, but its contents are the setting value itself of WR 2 on the port of channel A, the setting value of WR 2 itself at the port of channel A, It is a vector number.

　The interrupt vector numbers generated by the SCC are eight channels depending on the channel and interrupt factor, but the mode to change bits 3 to 1 among the specified vector numbers and bits 4 to 6 (note that the order of bits is different) In the latter case, %PPPP_XXXP in the above table is %PXXX_PPPP, it is necessary to read also the numerical value by interrupt factors Human 68k uses it in the mode to change bits 3 to 1 .

・I/O controller

device	address	r/w
I/O	$e9c003	R	%PPPP_PPXX  (Default = $60)
			※Lower 2 bits are changed by interrupt factor
			%00: FDC		%10: HD
			%01: FDD		%11: Printer

・MIDI board

device	address	r/w	(MIDI board)
MIDI	$eafa09	R	%PPPX_XXXX  (Default = $80)
 ID=0
MIDI	$eafa19	R	%PPPX_XXX0  (Default = $a0)
 ID=1			※Bits 4 to 1 are changed by an interrupt factor (bit 0 is always% 0)
		%0000: MIDI real time message detected
		       (The oldest data of FIFO-IRx is $f9 to $fd)
		%0001: Click Counter(Count value reached 0) /
		       MIDI-clock detected(The oldest data of FIFO-IRx is $f8)
		%0010: Play-back Counter(Playback counter becomes negative)
		%0011: Recording Counter(Recording counter reached 0)
		%0100: Off-line detected(No reception was made for 300 mS) /
		       Break detected(Serial input is 'L' for 2 characters)
		%0101: FIFO-Rx ready(Data was set in the receive FIFO)
		%0110: FIFO-Tx empty(Transmit FIFO is empty)
		%0111: General Timer(When the timer count value reaches 0)

Write $00 in the RGR of $eafa03 (ID = 1), $eafa13 (ID = 2) and write the vector number to GRP 4 of $eafa09, $eafa19.

・Parallel board

device	address	r/w	(Parallel board CZ-6BN1)
PARA	$eafb0b	?/W	%PPPP_PPPP (Default = $f9)
 ID=0
PARA	$eafb1b	?/W	%PPPP_PPPP (Default = $fa)
 ID=1

・Extended RS-232C board

device	address	r/w	(Extended RS-232C board CZ-6BF1)
RS232C	$eafc00	R/W	%PPPP_XXXP (Default = $b0 ※unconfirmed)
 ID=0(B)
RS232C	$eafc04	R/W	%PPPP_XXXP (Default = $b8 ※unconfirmed)
 ID=0(A)
RS232C	$eafc10	R/W	%PPPP_XXXP (Default = $c0 ※unconfirmed)
 ID=1(B)
RS232C	$eafc14	R/W	%PPPP_XXXP (Default = $c8 ※unconfirmed)
 ID=1(A)
RS232C	$eafc20	R/W	%PPPP_XXXP
 ID=2(B)
RS232C	$eafc24	R/W	%PPPP_XXXP
 ID=2(A)
RS232C	$eafc30	R/W	%PPPP_XXXP
 ID=3(B)
RS232C	$eafc34	R/W	%PPPP_XXXP
 ID=3(A)

　It is the same as the built-in SCC of X680x0, see the SCC section.

・Universal I / O board

device	address	r/w	(Universal I / O board CZ - 6 BU 1)
UIO	$eafd03	  W	%PPPP_PPPP  (Default = $fc ※unconfirmed)
 ID=0
UIO	$eafd07	  W	%PPPP_PPPP  (Default = $fd ※unconfirmed)
 ID=1
UIO	$eafd0b	  W	%PPPP_PPPP  (Default = $fe ※unconfirmed)
 ID=2
UIO	$eafd0f	  W	%PPPP_PPPP  (Default = $ff ※unconfirmed)
 ID=3

ID = 4 to 63, and the vector number setting address in that case is $eafd 13 to $eafdff.

・GP-IB board

device	address	r/w	(GP-IB board SH-6BG1)
GPIB	$eafe11	?/W	%PPPP_PPPP  (Default = $fb)

・Mercury-Unit V4

device	address	r/w	(Mercury-Unit V4 OPNA)
MK-MU1O	$ecc0b1	R/W	%PPPP_PPPP  (Default = $ff)
			※Only the timer on the master side can be used (not on the Slave side)

・POLYPHON

device	address	r/w	(POLYPHON)
POLY	$eff83f	R/W	%PPPP_PPPP
 ID=0
POLY	$eff8bf	R/W	%PPPP_PPPP
 ID=1

・PSX

device	address	r/w	(PSX16550 / PSX16750)
PSX	$efffxf	R/W	%PPPP_PPPP  (Default = $f0)
 SCR			※'x' contains the channel number ($0 to $f)

==============================================================================
